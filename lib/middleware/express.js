import bodyParser from "body-parser";
import { newErr, newCheck } from "./util/util";
export default function (app) {
  app.set("port", process.env.PORT || 3000);
  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded({ extended: true }));
}

/**
 * TBD: middleware that checks the request body and querystring against the
 * existing json configuration in order to ensure that:
 * all required parameters are present
 * all parameters are of the correct type
 * non-existing parameters are blocked
 *
 * @throws throw a 400 code error with a relevant error message
 *
 * @param {object} req request object generated by express
 * @param {object} res response object generated by express
 * @param {function} next middleware function
 */
export const checkAgainstRules = (req, res, next) => {
  const path = req.originalUrl.split("?")[0];
  const reqPath = jsonData.paths[path];
  const method = req.method.toLowerCase();

  if (reqPath) {
    const newSchema = reqPath[method];
    if (newSchema) {
      valReqBody(newSchema.parameters, req);
    } else {
      return next();
    }
  } else {
    throw new Error(newErr("Invalid Request", 404));
  }

  return next();
};

/**
 *
 * @throws
 *
 * @param {object} schema
 * @param {object} request
 */
const valReqBody = (schema, request) => {
  if (!schema) {
    return;
  }

  let query;
  let bodyRequest;
  let newParams;

  switch (schema[0].in) {
    case "query":
      query = request.query;
      newParams = Object.keys(query);
      if (Object.keys(query).length === 0) {
        throw new Error(newErr("Invalid Request", 400));
      }
      break;
    case "body":
      bodyRequest = request.body;
      newParams = Object.keys(bodyRequest);
      if (Object.keys(bodyRequest).length === 0) {
        throw new Error(newErr("Invalid Request", 400));
      }
      break;
  }

  let schemaReq = schema.filter(
    (parameter) =>
      newParams.includes(parameter.name) ||
      (parameter.schema && parameter.schema.properties)
  );

  schemaReq.forEach((parameter) => {
    switch (parameter.in) {
      case "query":
        newCheck(parameter, query[parameter.name]);
        break;
      case "body":
        newCheck(parameter.schema, bodyRequest);
        break;
      default:
        throw new Error(newErr("Invalid Request", 400));
    }
  });
};
